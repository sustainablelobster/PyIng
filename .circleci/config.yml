# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
workflows:
  build-and-deploy:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build-and-test
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/


orbs:
  python: circleci/python@2.0.3


jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.7.4
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: upgrade_pip
          command: pip install --upgrade pip
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: python -m unittest discover
  deploy:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - run:
          name: verify git tag vs. version
          command: python setup.py verify
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = levlaz" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create packages
          command: |
            python setup.py sdist & python setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            twine upload dist/*

